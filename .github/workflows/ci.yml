name: ci

on:
  push:
    branches: [ "main" ]
  pull_request:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-test:
    runs-on: ubuntu-latest
    env:
      GRAPH_API_KEY: ${{ secrets.GRAPH_API_KEY }}
      INDEXER_URL:  "http://localhost:8080"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # 1) Node — БЕЗ cache: 'pnpm'
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      # 2) PNPM — ставим явным шагом
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.15.0   # или 'latest'

      # 3) Кешируем pnpm store (самый быстрый и стабильный способ)
      - name: Get pnpm store path
        id: pnpm-cache
        run: echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      # 4) Установка зависимостей воркспейса
      - name: Install deps (workspace)
        run: pnpm -r install --frozen-lockfile
      
        # (временный шаг для проверки, можно удалить после успешного прогона)
      - name: Debug bins
        run: |
          pnpm -r exec node -v
          pnpm -r exec pnpm -v
          pnpm -r exec ls -la node_modules/.bin || true

      - name: Lint
        run: pnpm -w run lint

      - name: Test backend
        run: pnpm --filter backend-ts test

      - name: Test hedger
        run: pnpm --filter hedger test

  docker-build:
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - uses: actions/checkout@v4
      - name: Build Docker images (no push)
        run: |
          docker build -f infra/Dockerfile.backend -t backend-ts:ci .
          docker build -f infra/Dockerfile.hedger -t hedger:ci .
